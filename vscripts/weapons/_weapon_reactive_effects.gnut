global function WeaponReactiveEffects_Init
global function OnWeaponActivate_ReactiveKillEffects
global function OnWeaponDeactivate_ReactiveKillEffects
global function WeaponHasReactiveKillTrackingForCurrentSkin
global function SCB_UpdatePlayerWeaponReactiveEffects
global function WeaponReactiveKillEffects_ClearAllFX

#if SERVER
// TODO: Recover server function
#endif

const bool WEAPON_REACTIVE_EFFECTS_PRINTS = true

global enum eReactiveEffectUpdateType
{
	INVALID = -1,
	INIT,
	KNOCKDOWN,
	KILL,
}

struct WeaponReactiveKillActiveFXGroup
{
	ItemFlavor& weaponSkin
	int reactiveKillLevel
	bool isPersistent = false
	asset fx1p
	asset fx3p
}


#if SERVER







#endif


struct
{
	array<WeaponReactiveKillActiveFXGroup> activeReactiveKillFX
} file


void function WeaponReactiveEffects_Init()
{
}

void function OnWeaponActivate_ReactiveKillEffects( entity weapon )
{
}

void function OnWeaponDeactivate_ReactiveKillEffects( entity weapon )
{
	WeaponReactiveKillEffects_ClearAllFX( weapon )
}

#if SERVER




#endif

void function WeaponReactiveKillTracking_InitForWeapon( entity weapon )
{
	entity player = weapon.GetOwner()
		return

	int numKills = WeaponReactiveKillTracking_GetKillsForPlayerWithWeapon( player, weapon )

	#if SERVER





	#endif

	UpdatePlayerWeaponReactiveEffects( weapon, eReactiveEffectUpdateType.INIT )
}

bool function WeaponSkinHasReactiveKillTracking( ItemFlavor weaponSkin )
{
		return false

	return true
}

bool function WeaponHasReactiveKillTrackingForCurrentSkin( entity weapon )
{
		return false

	return true
}

int function WeaponReactiveKillTracking_GetKillsForPlayerWithWeapon( entity player, entity weapon )
{
		return -1

	ItemFlavor weaponSkin = GetItemFlavorByNetworkIndex_DEPRECATED( weapon.GetGrade() )

	#if SERVER

	#elseif CLIENT
		return weapon.GetProScreenIntValForIndex( PRO_SCREEN_IDX_MATCH_KILLS )
	#endif
	return 0
}

#if SERVER
// TODO: Recover server function
#endif // SERVER

void function SCB_UpdatePlayerWeaponReactiveEffects( entity weapon, int updateType )
{
	UpdatePlayerWeaponReactiveEffects( weapon, updateType )
}

void function UpdatePlayerWeaponReactiveEffects( entity weapon, int updateType )
{
		return

	entity player = weapon.GetOwner()
		return

	ItemFlavor weaponSkin = GetItemFlavorByNetworkIndex_DEPRECATED( weapon.GetGrade() )

	int numKills = WeaponReactiveKillTracking_GetKillsForPlayerWithWeapon( player, weapon )
	int reactiveKillLevel = WeaponSkin_GetReactToKillsLevelIndexForKillCount( weaponSkin, numKills )

	//
	WeaponReactiveKillEffects_ClearPersistentFX( weapon )
	WeaponReactiveKillEffects_StopPersistentSounds( weapon, weaponSkin)

	//
	if ( reactiveKillLevel > -1 )
	{
		WeaponReactiveKillEffects_PlayPersistentFX( weapon, weaponSkin, reactiveKillLevel )
		WeaponReactiveKillEffects_PlayPersistentSounds( weapon, weaponSkin, reactiveKillLevel )
	}

	bool doOneShotEffects = false
	int oneShotEffectsLevel = reactiveKillLevel

	switch ( updateType )
	{
		case eReactiveEffectUpdateType.KNOCKDOWN:
			//
			if ( oneShotEffectsLevel < 0 )
				oneShotEffectsLevel = 0

			//
		case eReactiveEffectUpdateType.KILL:
			doOneShotEffects = true
			break
	}

	if ( doOneShotEffects )
	{
		WeaponReactiveKillEffects_PlayOneShotFx( weapon, weaponSkin, oneShotEffectsLevel )
		WeaponReactiveKillEffects_PlayOneShotSounds( weapon, weaponSkin, oneShotEffectsLevel )
	}

	#if SERVER
	//

	#endif
}

void function WeaponReactiveKillEffects_PlayOneShotSounds( entity weapon, ItemFlavor weaponSkin, int reactiveKillLevel )
{
	WeaponReactiveKillsData rtked = WeaponSkin_GetReactToKillsDataForLevel( weaponSkin, reactiveKillLevel )

	string sound1p = rtked.killSoundEvent1p
	string sound3p = rtked.killSoundEvent3p

	if ( sound1p == "" && sound3p == "" )
		return

	weapon.EmitWeaponSound_1p3p( sound1p, sound3p )

	#if(true) // TODO: Figure out the real directive for this
		printt( "playing one-shot sounds", sound1p, sound3p )
	#endif
}

void function WeaponReactiveKillEffects_PlayPersistentSounds( entity weapon, ItemFlavor weaponSkin, int reactiveKillLevel )
{
	WeaponReactiveKillsData rtked = WeaponSkin_GetReactToKillsDataForLevel( weaponSkin, reactiveKillLevel )

	string sound1p = rtked.persistentSoundEvent1p
	string sound3p = rtked.persistentSoundEvent3p

	if ( sound1p == "" && sound3p == "" )
		return

	weapon.EmitWeaponSound_1p3p( sound1p, sound3p )

	#if(true) // TODO: Figure out the real directive for this
		printt( "playing persistent sounds", sound1p, sound3p )
	#endif
}

void function WeaponReactiveKillEffects_StopPersistentSounds( entity weapon, ItemFlavor weaponSkin )
{
	int numLevels = WeaponSkin_GetReactToKillsLevelCount( weaponSkin )
	for ( int i = 0; i < numLevels; i++ )
	{
		WeaponReactiveKillsData rtked = WeaponSkin_GetReactToKillsDataForLevel( weaponSkin, i )

		string sound1p = rtked.persistentSoundEvent1p
		string sound3p = rtked.persistentSoundEvent3p

		if ( sound1p == "" && sound3p == "" )
			continue

		if ( sound1p != "" )
			weapon.StopWeaponSound( sound1p )

		if ( sound3p != "" )
			weapon.StopWeaponSound( sound3p )

		#if(true) // TODO: Figure out the real directive for this
			printt( "stopping persistent sound(s)", sound1p, sound3p )
		#endif
	}
}

void function WeaponReactiveKillEffects_PlayOneShotFx( entity weapon, ItemFlavor weaponSkin, int reactiveKillLevel )
{
	WeaponReactiveKillsData rtked = WeaponSkin_GetReactToKillsDataForLevel( weaponSkin, reactiveKillLevel )

	foreach ( int killFXIdx, string attachmentName in rtked.killFXAttachmentList )
	{
		asset fx1p = rtked.killFX1PList[killFXIdx]
		asset fx3p = rtked.killFX3PList[killFXIdx]

		weapon.PlayWeaponEffect( fx1p, fx3p, attachmentName )

		#if(true) // TODO: Figure out the real directive for this
			printt( "playing flash FX", fx1p, fx3p, attachmentName )
		#endif

		WeaponReactiveKillEffects_AddActiveFXGroup( weaponSkin, reactiveKillLevel, fx1p, fx3p )
	}
}

void function WeaponReactiveKillEffects_PlayPersistentFX( entity weapon, ItemFlavor weaponSkin, int reactiveKillLevel )
{
	WeaponReactiveKillsData rtked = WeaponSkin_GetReactToKillsDataForLevel( weaponSkin, reactiveKillLevel )

	foreach ( int persistentFXIdx, string attachmentName in rtked.persistentFXAttachmentList )
	{
		asset fx1p = rtked.persistentFX1PList[persistentFXIdx]
		asset fx3p = rtked.persistentFX3PList[persistentFXIdx]

		weapon.PlayWeaponEffect( fx1p, fx3p, attachmentName )

		#if(true) // TODO: Figure out the real directive for this
			printt( "playing persistent FX", fx1p, fx3p, attachmentName )
		#endif

		WeaponReactiveKillEffects_AddActiveFXGroup( weaponSkin, reactiveKillLevel, fx1p, fx3p, true )
	}
}

void function WeaponReactiveKillEffects_AddActiveFXGroup( ItemFlavor weaponSkin, int reactiveKillLevel, asset fx1p, asset fx3p, bool isPersistent = false )
{
	WeaponReactiveKillActiveFXGroup fxGroup
	fxGroup.weaponSkin = weaponSkin
	fxGroup.reactiveKillLevel = reactiveKillLevel
	fxGroup.isPersistent = isPersistent
	fxGroup.fx1p = fx1p
	fxGroup.fx3p = fx3p

	file.activeReactiveKillFX.append( fxGroup )
}

void function WeaponReactiveKillEffects_ClearPersistentFX( entity weapon )
{
	array<int> idxsToRemove
	foreach ( int idx, fxGroup in file.activeReactiveKillFX )
	{
		if ( fxGroup.isPersistent )
		{
			#if(true) // TODO: Figure out the real directive for this
				printt( "removing effect", fxGroup.fx1p, fxGroup.fx3p )
			#endif

			weapon.StopWeaponEffect( fxGroup.fx1p, fxGroup.fx3p )
			idxsToRemove.append( idx )
		}
	}

	foreach ( removeIdx in idxsToRemove )
		if ( removeIdx in file.activeReactiveKillFX )
			file.activeReactiveKillFX.remove( removeIdx )
}

void function WeaponReactiveKillEffects_ClearAllFX( entity weapon )
{
	foreach ( int idx, fxGroup in file.activeReactiveKillFX )
	{
		#if(true) // TODO: Figure out the real directive for this
			printt( "removing effect", fxGroup.fx1p, fxGroup.fx3p )
		#endif

		weapon.StopWeaponEffect( fxGroup.fx1p, fxGroup.fx3p )
	}

	file.activeReactiveKillFX.clear()
}